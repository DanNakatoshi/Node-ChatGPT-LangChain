[["0",{"pageContent":"Introduction\nLangChain is a framework for developing applications powered by language models. It enables applications that are:\n\nData-aware: connect a language model to other sources of data\nAgentic: allow a language model to interact with its environment\nThe main value props of LangChain are:\n\nComponents: abstractions for working with language models, along with a collection of implementations for each abstraction. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\nOff-the-shelf chains: a structured assembly of components for accomplishing specific higher-level tasks\nOff-the-shelf chains make it easy to get started. For more complex applications and nuanced use-cases, components make it easy to customize existing chains or build new ones.\n\nGet started\nHere’s how to install LangChain, set up your environment, and start building.","metadata":{"loc":{"lines":{"from":1,"to":13}}}}],["1",{"pageContent":"Get started\nHere’s how to install LangChain, set up your environment, and start building.\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nNote: These docs are for the LangChain Python package. For documentation on LangChain.js, the JS/TS version, head here.\n\nModules\nLangChain provides standard, extendable interfaces and external integrations for the following modules, listed from least to most complex:\n\nModel I/O\nInterface with language models\n\nData connection\nInterface with application-specific data\n\nChains\nConstruct sequences of calls\n\nAgents\nLet chains choose which tools to use given high-level directives\n\nMemory\nPersist application state between runs of a chain\n\nCallbacks\nLog and stream intermediate steps of any chain\n\nExamples, ecosystem, and resources\nUse cases\nWalkthroughs and best-practices for common end-to-end use cases, like:","metadata":{"loc":{"lines":{"from":13,"to":43}}}}],["2",{"pageContent":"Callbacks\nLog and stream intermediate steps of any chain\n\nExamples, ecosystem, and resources\nUse cases\nWalkthroughs and best-practices for common end-to-end use cases, like:\n\nChatbots\nAnswering questions using sources\nAnalyzing structured data\nand much more...\nGuides\nLearn best practices for developing with LangChain.\n\nEcosystem\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations and dependent repos.\n\nAdditional resources\nOur community is full of prolific developers, creative builders, and fantastic teachers. Check out YouTube tutorials for great tutorials from folks in the community, and Gallery for a list of awesome LangChain projects, compiled by the folks at KyroLabs.\n\nSupport\nJoin us on GitHub or Discord to ask questions, share feedback, meet other developers building with LangChain, and dream about the future of LLM’s.","metadata":{"loc":{"lines":{"from":43,"to":64}}}}],["3",{"pageContent":"Support\nJoin us on GitHub or Discord to ask questions, share feedback, meet other developers building with LangChain, and dream about the future of LLM’s.\n\n\n\nAPI reference\nHead to the reference section for full documentation of all classes and methods in the LangChain Python package.\n\nInstallation\nOfficial release\nTo install LangChain run:\n\nPip\nConda\npip install langchain\n\nThat will install the bare minimum requirements of LangChain. A lot of the value of LangChain comes when integrating it with various model providers, datastores, etc. By default, the dependencies needed to do that are NOT installed. However, there are two other ways to install LangChain that do bring in those dependencies.\n\nTo install modules needed for the common LLM providers, run:\n\npip install langchain[llms]\n\nTo install all modules needed for all integrations, run:\n\npip install langchain[all]\n\nNote that if you are using zsh, you'll need to quote square brackets when passing them as an argument to a command, for example:","metadata":{"loc":{"lines":{"from":64,"to":90}}}}],["4",{"pageContent":"pip install langchain[all]\n\nNote that if you are using zsh, you'll need to quote square brackets when passing them as an argument to a command, for example:\n\npip install 'langchain[all]'\n\nFrom source\nIf you want to install from source, you can do so by cloning the repo and running:\n\npip install -e .\n\nQuickstart\nInstallation\nTo install LangChain run:\n\nPip\nConda\npip install langchain\n\nFor more details, see our Installation guide.\n\nEnvironment setup\nUsing LangChain will usually require integrations with one or more model providers, data stores, APIs, etc. For this example, we'll use OpenAI's model APIs.\n\nFirst we'll need to install their Python package:\n\npip install openai\n\nAccessing the API requires an API key, which you can get by creating an account and heading here. Once we have a key we'll want to set it as an environment variable by running:\n\nexport OPENAI_API_KEY=\"...\"","metadata":{"loc":{"lines":{"from":90,"to":120}}}}],["5",{"pageContent":"export OPENAI_API_KEY=\"...\"\n\nIf you'd prefer not to set an environment variable you can pass the key in directly via the openai_api_key named parameter when initiating the OpenAI LLM class:\n\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(openai_api_key=\"...\")\n\nBuilding an application\nNow we can start building our language model application. LangChain provides many modules that can be used to build language model applications. Modules can be used as stand-alones in simple applications and they can be combined for more complex use cases.\n\nLLMs\nGet predictions from a language model\nThe basic building block of LangChain is the LLM, which takes in text and generates more text.\n\nAs an example, suppose we're building an application that generates a company name based on a company description. In order to do this, we need to initialize an OpenAI model wrapper. In this case, since we want the outputs to be MORE random, we'll initialize our model with a HIGH temperature.\n\nfrom langchain.llms import OpenAI","metadata":{"loc":{"lines":{"from":120,"to":137}}}}],["6",{"pageContent":"from langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0.9)\n\nAnd now we can pass in text and get predictions!\n\nllm.predict(\"What would be a good company name for a company that makes colorful socks?\")\n# >> Feetful of Fun\n\nChat models\nChat models are a variation on language models. While chat models use language models under the hood, the interface they expose is a bit different: rather than expose a \"text in, text out\" API, they expose an interface where \"chat messages\" are the inputs and outputs.\n\nYou can get chat completions by passing one or more messages to the chat model. The response will be a message. The types of messages currently supported in LangChain are AIMessage, HumanMessage, SystemMessage, and ChatMessage -- ChatMessage takes in an arbitrary role parameter. Most of the time, you'll just be dealing with HumanMessage, AIMessage, and SystemMessage.\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import (\n    AIMessage,\n    HumanMessage,\n    SystemMessage\n)","metadata":{"loc":{"lines":{"from":137,"to":156}}}}],["7",{"pageContent":"from langchain.chat_models import ChatOpenAI\nfrom langchain.schema import (\n    AIMessage,\n    HumanMessage,\n    SystemMessage\n)\n\nchat = ChatOpenAI(temperature=0)\nchat.predict_messages([HumanMessage(content=\"Translate this sentence from English to French. I love programming.\")])\n# >> AIMessage(content=\"J'aime programmer.\", additional_kwargs={})\n\n\nIt is useful to understand how chat models are different from a normal LLM, but it can often be handy to just be able to treat them the same. LangChain makes that easy by also exposing an interface through which you can interact with a chat model as you would a normal LLM. You can access this through the predict interface.\n\nchat.predict(\"Translate this sentence from English to French. I love programming.\")\n# >> J'aime programmer","metadata":{"loc":{"lines":{"from":156,"to":171}}}}],["8",{"pageContent":"chat.predict(\"Translate this sentence from English to French. I love programming.\")\n# >> J'aime programmer\n\nPrompt templates\nMost LLM applications do not pass user input directly into an LLM. Usually they will add the user input to a larger piece of text, called a prompt template, that provides additional context on the specific task at hand.\n\nIn the previous example, the text we passed to the model contained instructions to generate a company name. For our application, it'd be great if the user only had to provide the description of a company/product, without having to worry about giving the model instructions.\n\nLLMs\nChat models\nWith PromptTemplates this is easy! In this case our template would be very simple:\n\nfrom langchain.prompts import PromptTemplate\n\nprompt = PromptTemplate.from_template(\"What is a good name for a company that makes {product}?\")\nprompt.format(product=\"colorful socks\")\n\nWhat is a good name for a company that makes colorful socks?","metadata":{"loc":{"lines":{"from":171,"to":188}}}}],["9",{"pageContent":"prompt = PromptTemplate.from_template(\"What is a good name for a company that makes {product}?\")\nprompt.format(product=\"colorful socks\")\n\nWhat is a good name for a company that makes colorful socks?\n\nChains\nNow that we've got a model and a prompt template, we'll want to combine the two. Chains give us a way to link (or chain) together multiple primitives, like models, prompts, and other chains.\n\nLLMs\nChat models\nThe simplest and most common type of chain is an LLMChain, which passes an input first to a PromptTemplate and then to an LLM. We can construct an LLM chain from our existing model and prompt template.\n\nUsing this we can replace\n\nllm.predict(\"What would be a good company name for a company that makes colorful socks?\")\n\nwith\n\nfrom langchain.chains import LLMChain\n\nchain = LLMChain(llm=llm, prompt=prompt)\nchain.run(\"colorful socks\")\n\nFeetful of Fun\n\nThere we go, our first chain! Understanding how this simple chain works will set you up well for working with more complex chains.","metadata":{"loc":{"lines":{"from":188,"to":213}}}}],["10",{"pageContent":"Feetful of Fun\n\nThere we go, our first chain! Understanding how this simple chain works will set you up well for working with more complex chains.\n\nAgents\nOur first chain ran a pre-determined sequence of steps. To handle complex workflows, we need to be able to dynamically choose actions based on inputs.\n\nAgents do just this: they use a language model to determine which actions to take and in what order. Agents are given access to tools, and they repeatedly choose a tool, run the tool, and observe the output until they come up with a final answer.\n\nTo load an agent, you need to choose a(n):","metadata":{"loc":{"lines":{"from":213,"to":222}}}}],["11",{"pageContent":"To load an agent, you need to choose a(n):\n\nLLM/Chat model: The language model powering the agent.\nTool(s): A function that performs a specific duty. This can be things like: Google Search, Database lookup, Python REPL, other chains. For a list of predefined tools and their specifications, see the Tools documentation.\nAgent name: A string that references a supported agent class. An agent class is largely parameterized by the prompt the language model uses to determine which action to take. Because this notebook focuses on the simplest, highest level API, this only covers using the standard supported agents. If you want to implement a custom agent, see here. For a list of supported agents and their specifications, see here.\nFor this example, we'll be using SerpAPI to query a search engine.\n\nYou'll need to install the SerpAPI Python package:\n\npip install google-search-results\n\nAnd set the SERPAPI_API_KEY environment variable.","metadata":{"loc":{"lines":{"from":222,"to":233}}}}],["12",{"pageContent":"You'll need to install the SerpAPI Python package:\n\npip install google-search-results\n\nAnd set the SERPAPI_API_KEY environment variable.\n\nLLMs\nChat models\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n\n# The language model we're going to use to control the agent.\nllm = OpenAI(temperature=0)\n\n# The tools we'll give the Agent access to. Note that the 'llm-math' tool uses an LLM, so we need to pass that in.\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n\n# Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use.\nagent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n\n# Let's test it out!\nagent.run(\"What was the high temperature in SF yesterday in Fahrenheit? What is that number raised to the .023 power?\")\n\n\n> Entering new AgentExecutor chain...","metadata":{"loc":{"lines":{"from":233,"to":257}}}}],["13",{"pageContent":"# Let's test it out!\nagent.run(\"What was the high temperature in SF yesterday in Fahrenheit? What is that number raised to the .023 power?\")\n\n\n> Entering new AgentExecutor chain...\n\nThought: I need to find the temperature first, then use the calculator to raise it to the .023 power.\nAction: Search\nAction Input: \"High temperature in SF yesterday\"\nObservation: San Francisco Temperature Yesterday. Maximum temperature yesterday: 57 °F (at 1:56 pm) Minimum temperature yesterday: 49 °F (at 1:56 am) Average temperature ...\n\nThought: I now have the temperature, so I can use the calculator to raise it to the .023 power.\nAction: Calculator\nAction Input: 57^.023\nObservation: Answer: 1.0974509573251117\n\nThought: I now know the final answer\nFinal Answer: The high temperature in SF yesterday in Fahrenheit raised to the .023 power is 1.0974509573251117.\n\n> Finished chain.\n\n\nThe high temperature in SF yesterday in Fahrenheit raised to the .023 power is 1.0974509573251117.","metadata":{"loc":{"lines":{"from":257,"to":279}}}}],["14",{"pageContent":"> Finished chain.\n\n\nThe high temperature in SF yesterday in Fahrenheit raised to the .023 power is 1.0974509573251117.\n\nMemory\nThe chains and agents we've looked at so far have been stateless, but for many applications it's necessary to reference past interactions. This is clearly the case with a chatbot for example, where you want it to understand new messages in the context of past messages.\n\nThe Memory module gives you a way to maintain application state. The base Memory interface is simple: it lets you update state given the latest run inputs and outputs and it lets you modify (or contextualize) the next input using the stored state.\n\nThere are a number of built-in memory systems. The simplest of these is a buffer memory which just prepends the last few inputs/outputs to the current input - we will use this in the example below.\n\nLLMs\nChat models\nfrom langchain import OpenAI, ConversationChain\n\nllm = OpenAI(temperature=0)\nconversation = ConversationChain(llm=llm, verbose=True)","metadata":{"loc":{"lines":{"from":279,"to":296}}}}],["15",{"pageContent":"LLMs\nChat models\nfrom langchain import OpenAI, ConversationChain\n\nllm = OpenAI(temperature=0)\nconversation = ConversationChain(llm=llm, verbose=True)\n\nconversation.run(\"Hi there!\")\n\nhere's what's going on under the hood\n\n> Entering new chain...\nPrompt after formatting:\nThe following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\nCurrent conversation:\n\nHuman: Hi there!\nAI:\n\n> Finished chain.\n\n>> 'Hello! How are you today?'\n\n\nNow if we run the chain again\n\nconversation.run(\"I'm doing well! Just having a conversation with an AI.\")\n\nwe'll see that the full prompt that's passed to the model contains the input and output of our first interaction, along with our latest input","metadata":{"loc":{"lines":{"from":296,"to":325}}}}],["16",{"pageContent":"we'll see that the full prompt that's passed to the model contains the input and output of our first interaction, along with our latest input\n\n> Entering new chain...\nPrompt after formatting:\nThe following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\nCurrent conversation:\n\nHuman: Hi there!\nAI:  Hello! How are you today?\nHuman: I'm doing well! Just having a conversation with an AI.\nAI:\n\n> Finished chain.\n\n>> \"That's great! What would you like to talk about?\"\n\n\nTutorials\n⛓ icon marks a new addition [last update 2023-07-05]\n\nDeepLearning.AI courses\nby Harrison Chase and Andrew Ng\n\nLangChain for LLM Application Development\n⛓ LangChain Chat with Your Data\nHandbook\nLangChain AI Handbook By James Briggs and Francisco Ingham\n\nShort Tutorials\nLangChain Crash Course - Build apps with language models by Patrick Loeber","metadata":{"loc":{"lines":{"from":325,"to":355}}}}],["17",{"pageContent":"Short Tutorials\nLangChain Crash Course - Build apps with language models by Patrick Loeber\n\nLangChain Crash Course: Build an AutoGPT app in 25 minutes by Nicholas Renotte\n\nLangChain Explained in 13 Minutes | QuickStart Tutorial for Beginners by Rabbitmetrics","metadata":{"loc":{"lines":{"from":355,"to":360}}}}],["18",{"pageContent":"Tutorials\nLangChain for Gen AI and LLMs by James Briggs\n#1 Getting Started with GPT-3 vs. Open Source LLMs\n#2 Prompt Templates for GPT 3.5 and other LLMs\n#3 LLM Chains using GPT 3.5 and other LLMs\nLangChain Data Loaders, Tokenizers, Chunking, and Datasets - Data Prep 101\n#4 Chatbot Memory for Chat-GPT, Davinci + other LLMs\n#5 Chat with OpenAI in LangChain\n#6 Fixing LLM Hallucinations with Retrieval Augmentation in LangChain\n#7 LangChain Agents Deep Dive with GPT 3.5\n#8 Create Custom Tools for Chatbots in LangChain\n#9 Build Conversational Agents with Vector DBs\nUsing NEW MPT-7B in Hugging Face and LangChain\n⛓ MPT-30B Chatbot with LangChain\nLangChain 101 by Greg Kamradt (Data Indy)\nWhat Is LangChain? - LangChain + ChatGPT Overview\nQuickstart Guide\nBeginner Guide To 7 Essential Concepts\nBeginner Guide To 9 Use Cases\nAgents Overview + Google Searches\nOpenAI + Wolfram Alpha\nAsk Questions On Your Custom (or Private) Files\nConnect Google Drive Files To OpenAI\nYouTube Transcripts + OpenAI","metadata":{"loc":{"lines":{"from":362,"to":385}}}}],["19",{"pageContent":"Beginner Guide To 9 Use Cases\nAgents Overview + Google Searches\nOpenAI + Wolfram Alpha\nAsk Questions On Your Custom (or Private) Files\nConnect Google Drive Files To OpenAI\nYouTube Transcripts + OpenAI\nQuestion A 300 Page Book (w/ OpenAI + Pinecone)\nWorkaround OpenAI's Token Limit With Chain Types\nBuild Your Own OpenAI + LangChain Web App in 23 Minutes\nWorking With The New ChatGPT API\nOpenAI + LangChain Wrote Me 100 Custom Sales Emails\nStructured Output From OpenAI (Clean Dirty Data)\nConnect OpenAI To +5,000 Tools (LangChain + Zapier)\nUse LLMs To Extract Data From Text (Expert Mode)\nExtract Insights From Interview Transcripts Using LLMs\n5 Levels Of LLM Summarizing: Novice to Expert\nControl Tone & Writing Style Of Your LLM Output\nBuild Your Own AI Twitter Bot Using LLMs\nChatGPT made my interview questions for me (Streamlit + LangChain)\nFunction Calling via ChatGPT API - First Look With LangChain\n⛓ Extract Topics From Video/Audio With LLMs (Topic Modeling w/ LangChain)","metadata":{"loc":{"lines":{"from":385,"to":405}}}}],["20",{"pageContent":"ChatGPT made my interview questions for me (Streamlit + LangChain)\nFunction Calling via ChatGPT API - First Look With LangChain\n⛓ Extract Topics From Video/Audio With LLMs (Topic Modeling w/ LangChain)\nLangChain How to and guides by Sam Witteveen\nLangChain Basics - LLMs & PromptTemplates with Colab\nLangChain Basics - Tools and Chains\nChatGPT API Announcement & Code Walkthrough with LangChain\nConversations with Memory (explanation & code walkthrough)\nChat with Flan20B\nUsing Hugging Face Models locally (code walkthrough)\nPAL : Program-aided Language Models with LangChain code\nBuilding a Summarization System with LangChain and GPT-3 - Part 1\nBuilding a Summarization System with LangChain and GPT-3 - Part 2\nMicrosoft's Visual ChatGPT using LangChain\nLangChain Agents - Joining Tools and Chains with Decisions\nComparing LLMs with LangChain\nUsing Constitutional AI in LangChain\nTalking to Alpaca with LangChain - Creating an Alpaca Chatbot\nTalk to your CSV & Excel with LangChain","metadata":{"loc":{"lines":{"from":405,"to":423}}}}],["21",{"pageContent":"Comparing LLMs with LangChain\nUsing Constitutional AI in LangChain\nTalking to Alpaca with LangChain - Creating an Alpaca Chatbot\nTalk to your CSV & Excel with LangChain\nBabyAGI: Discover the Power of Task-Driven Autonomous Agents!\nImprove your BabyAGI with LangChain\nMaster PDF Chat with LangChain - Your essential guide to queries on documents\nUsing LangChain with DuckDuckGO Wikipedia & PythonREPL Tools\nBuilding Custom Tools and Agents with LangChain (gpt-3.5-turbo)\nLangChain Retrieval QA Over Multiple Files with ChromaDB\nLangChain Retrieval QA with Instructor Embeddings & ChromaDB for PDFs\nLangChain + Retrieval Local LLMs for Retrieval QA - No OpenAI!!!\nCamel + LangChain for Synthetic Data & Market Research\nInformation Extraction with LangChain & Kor\nConverting a LangChain App from OpenAI to OpenSource\nUsing LangChain Output Parsers to get what you want out of LLMs\nBuilding a LangChain Custom Medical Agent with Memory\nUnderstanding ReACT with LangChain","metadata":{"loc":{"lines":{"from":423,"to":440}}}}],["22",{"pageContent":"Using LangChain Output Parsers to get what you want out of LLMs\nBuilding a LangChain Custom Medical Agent with Memory\nUnderstanding ReACT with LangChain\nOpenAI Functions + LangChain : Building a Multi Tool Agent\nWhat can you do with 16K tokens in LangChain?\nTagging and Extraction - Classification using OpenAI Functions\n⛓ HOW to Make Conversational Form with LangChain\nLangChain by Prompt Engineering\nLangChain Crash Course — All You Need to Know to Build Powerful Apps with LLMs\nWorking with MULTIPLE PDF Files in LangChain: ChatGPT for your Data\nChatGPT for YOUR OWN PDF files with LangChain\nTalk to YOUR DATA without OpenAI APIs: LangChain\nLangchain: PDF Chat App (GUI) | ChatGPT for Your PDF FILES\nLangFlow: Build Chatbots without Writing Code\nLangChain: Giving Memory to LLMs\nBEST OPEN Alternative to OPENAI's EMBEDDINGs for Retrieval QA: LangChain\nLangChain by Chat with data\nLangChain Beginner's Tutorial for Typescript/Javascript","metadata":{"loc":{"lines":{"from":440,"to":457}}}}],["23",{"pageContent":"LangChain: Giving Memory to LLMs\nBEST OPEN Alternative to OPENAI's EMBEDDINGs for Retrieval QA: LangChain\nLangChain by Chat with data\nLangChain Beginner's Tutorial for Typescript/Javascript\nGPT-4 Tutorial: How to Chat With Multiple PDF Files (~1000 pages of Tesla's 10-K Annual Reports)\nGPT-4 & LangChain Tutorial: How to Chat With A 56-Page PDF Document (w/Pinecone)\nLangChain & Supabase Tutorial: How to Build a ChatGPT Chatbot For Your Website\nLangChain Agents: Build Personal Assistants For Your Data (Q&A with Harrison Chase and Mayo Oshin)\n⛓ icon marks a new addition [last update 2023-07-05]","metadata":{"loc":{"lines":{"from":457,"to":465}}}}]]